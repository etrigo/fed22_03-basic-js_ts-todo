{"version":3,"sources":["ts/handlers.ts","ts/listeners.ts","ts/util.ts","ts/initialize.ts","ts/app.ts"],"names":[],"mappings":";AA6DkC,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,WAAA,MAAA,EAAA,cAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,WAAA,QAAA,iBAAA,EA5DlC,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,UAIM,EAAc,SAAC,GACjB,EAAM,iBAGN,EAAA,MAAM,QAAQ,SAAA,GACN,EAAK,IAAM,OAAO,EAAM,OAAO,MAC/B,EAAK,OAAQ,EAAK,SAK1B,aAAa,QAAQ,QAAS,KAAK,UAAU,EAAA,SAG7C,EAAA,EAAA,MAAK,EAAA,QAyCA,QAAA,YAAA,EApCT,IAAM,EAAa,SAAC,GAChB,EAAM,iBAGN,IAAM,EAAmB,EAAM,OAAO,SAAS,YAAY,MAG3D,GAAgB,IAAZ,EACA,MAAM,gCACH,CACH,IAAM,EAAiB,KAAK,IAAL,MAAA,KAAY,EAAA,EAAA,MAAM,IAAI,SAAA,GAAI,OAAI,EAAK,OAAO,EACjE,EAAA,MAAM,KAAK,CACP,GAAI,EACJ,KAAM,EACN,OAAO,IAIX,aAAa,QAAQ,QAAS,KAAK,UAAU,EAAA,SAG7C,EAAA,EAAA,MAAK,EAAA,OAGQ,SAAS,eAAe,QAChC,UAWS,QAAA,WAAA,EALtB,IAAM,EAAa,YACf,EAAA,EAAA,OAAK,IAIyB,QAAA,WAAA;;ACfO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,cAAA,QAAA,qBAAA,EA9CzC,IAAA,EAAA,QAAA,cAIA,SAAS,IAEL,IAAM,EAAa,SAAS,iBAAiB,0BAG7C,EAAW,QAAQ,SAAA,GACf,EAAS,oBAAoB,QAAS,EAAA,eAI1C,EAAW,QAAQ,SAAA,GACf,EAAS,iBAAiB,QAAS,EAAA,eA+BlC,QAAA,gBAAA,EAzBT,IAAM,EAAgB,WAElB,IAAM,EAAO,SAAS,eAAe,QAGrC,EAAK,oBAAoB,SAAU,EAAA,YAGnC,EAAK,iBAAiB,SAAU,EAAA,aAiBV,QAAA,cAAA,EAZ1B,IAAM,EAAc,WAEhB,IAAM,EAAW,SAAS,eAAe,YAGzC,EAAS,oBAAoB,QAAS,EAAA,YAGtC,EAAS,iBAAiB,QAAS,EAAA,aAIE,QAAA,YAAA;;AC2CJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,QAAA,cAAA,QAAA,KAAA,QAAA,WAAA,EAxFrC,IAAA,EAAA,QAAA,eAIM,EAAgB,GAoFb,QAAA,MAAA,EAhFT,IAAM,EAAkB,CAAE,OAAO,GAG3B,EAAiC,aAAa,QAAQ,aAC5D,GAAI,EAAmB,CAEnB,IAAM,EAAW,SAAS,eAAe,YAGnC,EAAwB,KAAK,MAAM,GACrC,EAAgB,MAChB,EAAS,UAAY,YAErB,EAAS,UAAY,WACrB,EAAU,OAAQ,GAM1B,IAAM,EAAO,SAAC,GAEN,EAAU,MACV,EAAM,KAAK,SAAC,EAAG,GAAC,OAAK,EAAE,KAAK,cAAc,EAAE,QAE5C,EAAM,KAAK,SAAC,EAAG,GAAC,OAAK,EAAE,KAAK,cAAc,EAAE,QAAO,UAInD,IACA,EAAU,OAAQ,EAAU,MAC5B,aAAa,QAAQ,YAAa,KAAK,UAAU,KAIrD,aAAa,QAAQ,QAAS,KAAK,UAAU,IAE7C,IAGA,EAAK,IAwCO,QAAA,KAAA,EApChB,IAAM,EAAgB,WAElB,IAAM,EAAW,SAAS,eAAe,YACrC,EAAU,MACV,EAAS,UAAY,WAErB,EAAS,UAAY,YA8BP,QAAA,cAAA,EAzBtB,IAAM,EAAO,SAAC,GAEV,IAAM,EAAc,SAAS,eAAe,aACtC,EAAgB,SAAS,eAAe,kBAG1C,EAAwB,GACxB,EAA0B,GAC9B,EAAM,QAAQ,SAAA,GACN,EAAK,MACL,GAAiD,kCAAA,OAAA,EAAK,GAAU,SAAA,OAAA,EAAK,KAAe,aAEpF,GAA2E,0DAAA,OAAA,EAAK,GAAU,SAAA,OAAA,EAAK,KAAe,eAKtH,EAAY,UAAY,EACxB,EAAc,UAAY,GAG1B,EAAA,EAAA,oBAIiC,QAAA,KAAA;;ACtC5B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EAlDT,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,eAGM,EAAa,WAEf,IAAI,EAA4B,aAAa,QAAQ,SAGrD,GAAoB,MAAhB,EACa,KAAK,MAAM,GACnB,QAAQ,SAAC,GACV,EAAA,MAAM,KAAK,UAEZ,GAAqB,OAAjB,EAAuB,CAK9B,IAHA,IAAM,EAAoB,CAAC,yBAA0B,4BAA6B,yBAA0B,4BAA6B,+BAGhI,EAAI,EAAG,EAAI,EAAG,IACf,EAAI,EACJ,EAAA,MAAM,KAAK,CACP,GAAI,EAAI,EACR,KAAM,EAAQ,GACd,OAAO,IAGX,EAAA,MAAM,KAAK,CACP,GAAI,EAAI,EACR,KAAM,EAAQ,GACd,OAAO,IAMnB,aAAa,QAAQ,QAAS,KAAK,UAAU,EAAA,SAIjD,EAAA,EAAA,MAAK,EAAA,QAGL,EAAA,EAAA,kBAGA,EAAA,EAAA,gBAIK,QAAA,WAAA;;AC/CG,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJZ,IAAA,EAAA,QAAA,iBAIA,EAAA,EAAA","file":"app.d6c56e81.js","sourceRoot":"..\\src","sourcesContent":["// import type { Todo } from \"./types\"\r\nimport { list } from \"./util\"\r\nimport { todos, sort } from \"./util\"\r\n\r\n\r\n// handle state for todos\r\nconst handleState = (event: any): void => {\r\n    event.preventDefault()\r\n\r\n    // toggle todo state between active and inactive for each todo\r\n    todos.forEach(todo => {\r\n        if (todo.id == Number(event.target.id)) {\r\n            todo.state = todo.state ? false : true\r\n        }\r\n    })\r\n\r\n    // update local storage\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos))\r\n    \r\n    // populate todos to page\r\n    list(todos)\r\n}\r\n\r\n\r\n// add new todo handler\r\nconst handleForm = (event: any): void => {\r\n    event.preventDefault()\r\n\r\n    // get value from form input\r\n    const new_todo: string = event.target.elements[\"add-todo\"].value\r\n\r\n    // validate input value\r\n    if (new_todo == \"\") {\r\n        alert(\"A todo must be filled in\")\r\n    } else {\r\n        const new_id: number = Math.max(...todos.map(todo => todo.id)) + 1\r\n        todos.push({\r\n            id: new_id,\r\n            todo: new_todo,\r\n            state: true\r\n        })\r\n\r\n        // update local storage\r\n        localStorage.setItem(\"todos\", JSON.stringify(todos))\r\n    \r\n        // populate todos to page\r\n        list(todos)\r\n    \r\n        // reset form\r\n        const form = document.getElementById(\"form\") as HTMLFormElement\r\n        form.reset()\r\n    }\r\n}\r\n\r\n\r\n// handle sort function\r\nconst handleSort = (): void => {\r\n    sort(true)\r\n}\r\n\r\n\r\nexport { handleState, handleForm, handleSort }","import { handleState, handleForm, handleSort } from \"./handlers\"\r\n\r\n\r\n// add listeners to checkboxes\r\nfunction listen_checkbox(): void {\r\n    // get a node list of all checkboxes\r\n    const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]') as NodeListOf<Element>\r\n    \r\n    // remove potential old listners\r\n    checkboxes.forEach(checkbox => {\r\n        checkbox.removeEventListener(\"click\", handleState)\r\n    })\r\n    \r\n    // add listners to checkboxes\r\n    checkboxes.forEach(checkbox => {\r\n        checkbox.addEventListener(\"click\", handleState)\r\n    })\r\n}\r\n\r\n\r\n// listner for add new form\r\nconst listen_submit = (): void => {\r\n    // get form element\r\n    const form = document.getElementById(\"form\") as HTMLFormElement\r\n    \r\n    // remove potential old listeners\r\n    form.removeEventListener(\"submit\", handleForm)\r\n\r\n    // add listner to form\r\n    form.addEventListener(\"submit\", handleForm)\r\n}\r\n\r\n\r\n// listener for sort button\r\nconst listen_sort = (): void => {\r\n    // get button element\r\n    const sort_btn = document.getElementById(\"sort-btn\") as HTMLElement\r\n\r\n    // remove potential old listeners\r\n    sort_btn.removeEventListener(\"click\", handleSort)\r\n\r\n    // add listner to form\r\n    sort_btn.addEventListener(\"click\", handleSort)\r\n}\r\n\r\n\r\nexport { listen_checkbox, listen_submit, listen_sort }","import type { Todo, Sort } from \"./types\"\r\nimport { listen_checkbox } from \"./listeners\"\r\n\r\n\r\n// array for active todos\r\nconst todos: Todo[] = []\r\n\r\n\r\n// boolean value for sort state where true is A-Z ad false is Z-A\r\nconst sortState: Sort = { state: true }\r\n\r\n// check if previus sort state is stored to update sort button text\r\nconst stored_sort_state: string|null = localStorage.getItem(\"sortState\")\r\nif (stored_sort_state) {\r\n    // get button element\r\n    const sort_btn = document.getElementById(\"sort-btn\") as HTMLElement\r\n\r\n    // parse stored string to JSON data\r\n    const storedSortState: Sort = JSON.parse(stored_sort_state)\r\n    if (storedSortState.state) {\r\n        sort_btn.innerText = \"Sort A-Z\"\r\n    } else {\r\n        sort_btn.innerText = \"Sort Z-A\"\r\n        sortState.state = false\r\n    }\r\n}\r\n\r\n\r\n// sort function based on state\r\nconst sort = (btn?: boolean): void => {\r\n    // sort todos a-z or z-a depending on state\r\n    if (sortState.state) {\r\n        todos.sort((a, b) => a.todo.localeCompare(b.todo))\r\n    } else {\r\n        todos.sort((a, b) => a.todo.localeCompare(b.todo)).reverse()\r\n    }\r\n\r\n    // check if sort war triggerd by button\r\n    if (btn) {\r\n        sortState.state = sortState.state ? false : true\r\n        localStorage.setItem(\"sortState\", JSON.stringify(sortState))\r\n    }\r\n    \r\n    // store to local storage\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos))\r\n\r\n    sort_btn_text()\r\n    \r\n    // populate sorted todos on page\r\n    list(todos)\r\n}\r\n\r\n\r\nconst sort_btn_text = (): void => {\r\n    // set sort button text depending on state\r\n    const sort_btn = document.getElementById(\"sort-btn\") as HTMLElement\r\n    if (sortState.state) {\r\n        sort_btn.innerText = \"Sort A-Z\"\r\n    } else {\r\n        sort_btn.innerText = \"Sort Z-A\"\r\n    }\r\n}\r\n\r\n// function to create HTML\r\nconst list = (array: Todo[]): void => {\r\n    // get ul for active and inactive todos\r\n    const active_list = document.getElementById(\"todo-list\") as HTMLInputElement\r\n    const inactive_list = document.getElementById(\"todo-list-done\") as HTMLInputElement\r\n\r\n    // create HTML for both lists\r\n    let active_HTML: string = ``\r\n    let inactive_HTML: string = ``\r\n    array.forEach(todo => {\r\n        if (todo.state) {\r\n            active_HTML += `<li><input type=\"checkbox\" id=\"${todo.id}\"><p>${todo.todo}</p></li>`\r\n        } else {\r\n            inactive_HTML += `<li class=\"checked\"><input type=\"checkbox\" checked id=\"${todo.id}\"><p>${todo.todo}</p></li>`\r\n        }\r\n    })\r\n    \r\n    // set HTML to active and inactive list elements\r\n    active_list.innerHTML = active_HTML\r\n    inactive_list.innerHTML = inactive_HTML\r\n\r\n    // add listner to checkboxes\r\n    listen_checkbox()\r\n}\r\n\r\n\r\nexport { todos, sort, sort_btn_text, list }","import type { Todo } from \"./types\";\r\nimport { todos, list } from \"./util\";\r\nimport { listen_submit, listen_sort } from \"./listeners\";\r\n\r\n\r\nconst initialize = (): void => {\r\n    // check local storage for todos\r\n    let stored_todos: string|null = localStorage.getItem(\"todos\")\r\n\r\n    // if todos in local storage populate to site else create initial dummy todos\r\n    if (stored_todos != null) {\r\n        const data = JSON.parse(stored_todos)\r\n        data.forEach((todo: Todo): void => {\r\n            todos.push(todo)\r\n        });\r\n    } else if (stored_todos === null) {\r\n        // initial todos array\r\n        const initial: string[] = [\"This is the first todo\", \"Another todo in your list\", \"Try checking this todo\", \"This todo is already done\", \"Try to uncheck/check a todo\"]\r\n        \r\n        // create three initial active and two inactive todos as demo\r\n        for (let i = 0; i < 5; i++) {\r\n            if (i < 3) {\r\n                todos.push({\r\n                    id: i + 1,\r\n                    todo: initial[i],\r\n                    state: true\r\n                })\r\n            } else {\r\n                todos.push({\r\n                    id: i + 1,\r\n                    todo: initial[i],\r\n                    state: false\r\n                })\r\n            }\r\n        }\r\n\r\n        // store to local storage\r\n        localStorage.setItem(\"todos\", JSON.stringify(todos))\r\n    }\r\n\r\n    // poputale todos to site\r\n    list(todos)\r\n\r\n    // listen to add-new-form\r\n    listen_submit()\r\n\r\n    // listen sort\r\n    listen_sort()\r\n}\r\n\r\n\r\nexport { initialize }","import { initialize } from \"./initialize\"\r\n\r\n\r\n// initialize app\r\ninitialize()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}